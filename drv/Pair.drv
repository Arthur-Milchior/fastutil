/*
* Copyright (C) 2020 Google LLC
* Author: arthurmilchior@google.com
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package PACKAGE;

import it.unimi.dsi.fastutil.Pair;


/** A type-specific {@link Pair}; provides some additional methods that use polymorphism to avoid (un)boxing.
*
* @see Pair
*/

public class PAIR KEY_VALUE_GENERIC implements Hash {
	public final KEY_GENERIC_TYPE first;
	public final VALUE_GENERIC_TYPE second;

	/**
	* Constructor for a pair
	*
	* @param first the first element in the pair
	* @param second the second element in the pair
	*/
	public PAIR(KEY_GENERIC_TYPE first, VALUE_GENERIC_TYPE second) {
		this.first = first;
		this.second = second;
	}

	/**
	* Checks the two objects for equality
	*
	* @param o the {@link PAIR} to which this one is to be checked for equality
	* @return true if the underlying objects of the PAIR are both considered equal
	*/
	@Override
	public boolean equals(Object o) {
		if (!(o instanceof PAIR)) {
			return false;
		}
		PAIR KEY_VALUE_GENERIC p = (Pair KEY_VALUE_GENERIC_WILDCARD) o;
		return KEY_EQUALS(p.first, first) && VALUE_EQUALS(p.second, second);
	}

	/**
	* Compute a hash code using the hash codes of the underlying objects
	*
	* @return a hashcode of the Pair
	*/
	@Override
	public int hashCode() {
		return (KEY2JAVAHASH(first)) ^ (VALUE2JAVAHASH(second));
	}

	@Override
	public String toString() {
		return "Pair{" + String.valueOf(first) + " " + String.valueOf(second) + "}";
	}

}
